print_ID <- function(hgvs_file) {
for (value in hgvs_file) {
cat(value, "\n")
}
}
print_ID <- function(hgvs_file) {
for (value in hgvs_file) {
cat(value, "\n")
}
}
print_ID(hgvs)
print_ID <- function(hgvs_file) {
for (value in hgvs_file) {
getVariant(value)
variant$dbnsfp$genename
}
}
print_ID(hgvs_snp)
library(myvariant)
print_ID <- function(hgvs_file) {
for (value in hgvs_file) {
getVariant(value)
variant$dbnsfp$genename
}
}
print_ID(hgvs_snp)
print_ID <- function(hgvs_file) {
for (value in hgvs_file) {
getVariant(value)
variant[[1]]$dbnsfp$genename
}
}
print_ID(hgvs_snp)
print_ID <- function(hgvs_file) {
for (value in hgvs_file) {
getVariant(value)
variant[[1]]$cadd$phred
}
}
print_ID(hgvs_snp)
getVariants(c(hgvs[1], hgvs[4]), fields = "cadd.consequence")
# Load necessary library for reading VCF files
library(vcfR)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- read.vcfR(vcf_file)
# Filter variants based on specified key and value in INFO field
filtered_variants <- vcf[vcf@info[[key]] == value, ]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_csv <- function(filtered_variants, output_file) {
write.csv(as.data.frame(filtered_variants), file = output_file, row.names = FALSE)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Load necessary library for reading VCF files
library(vcfR)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- read.vcfR(vcf_file)
# Filter variants based on specified key and value in INFO field
info_field <- vcf@header[["INFO"]][key]
variant_indices <- which(vcf@info[[key]] == value)
filtered_variants <- vcf[variant_indices, ]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_csv <- function(filtered_variants, output_file) {
write.csv(as.data.frame(filtered_variants), file = output_file, row.names = FALSE)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Load necessary library for reading VCF files
library(vcfR)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- read.vcf(vcf_file)
# Filter variants based on specified key and value in INFO field
info_field <- vcf@info[[key]]
variant_indices <- which(info_field == value)
filtered_variants <- vcf[variant_indices, ]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_csv <- function(filtered_variants, output_file) {
write.csv(as.data.frame(filtered_variants), file = output_file, row.names = FALSE)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Load necessary library for reading VCF files
library(VariantAnnotation)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- read.vcf(vcf_file)
# Filter variants based on specified key and value in INFO field
info_field <- vcf@info[[key]]
variant_indices <- which(info_field == value)
filtered_variants <- vcf[variant_indices, ]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_csv <- function(filtered_variants, output_file) {
write.csv(as.data.frame(filtered_variants), file = output_file, row.names = FALSE)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Load necessary library for reading VCF files
library(VariantAnnotation)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- readVcf(vcf_file)
# Filter variants based on specified key and value in INFO field
info_field <- vcf@info[[key]]
variant_indices <- which(info_field == value)
filtered_variants <- vcf[variant_indices, ]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_csv <- function(filtered_variants, output_file) {
write.csv(as.data.frame(filtered_variants), file = output_file, row.names = FALSE)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Load necessary library for reading VCF files
library(VariantAnnotation)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- readVcf(vcf_file, "hg19")
# Extract INFO field
info_field <- info(vcf)
# Filter variants based on specified key and value in INFO field
filtered_variants <- subsetByFilter(vcf, paste0(key, "=='", value, "'"))
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_csv <- function(filtered_variants, output_file) {
write.csv(as.data.frame(filtered_variants), file = output_file, row.names = FALSE)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Load necessary library for reading VCF files
library(VariantAnnotation)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- readVcf(vcf_file, "hg19")
# Extract INFO field
info_field <- info(vcf)[[key]]
# Filter variants based on specified key and value in INFO field
variant_indices <- which(info_field == value)
filtered_variants <- vcf[variant_indices]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_csv <- function(filtered_variants, output_file) {
write.csv(as.data.frame(filtered_variants), file = output_file, row.names = FALSE)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Load necessary library for reading VCF files
library(VariantAnnotation)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- readVcf(vcf_file, "hg19")
# Extract INFO field
info_field <- as.character(info(vcf)[[key]])
# Filter variants based on specified key and value in INFO field
variant_indices <- which(info_field == value)
filtered_variants <- vcf[variant_indices]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_csv <- function(filtered_variants, output_file) {
write.csv(as.data.frame(filtered_variants), file = output_file, row.names = FALSE)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Specify output CSV file path
output_csv <- "C:/Users/apera/OneDrive/Escritorio/testingTFM.csv"
# Write filtered variants to CSV file
write_to_csv(filtered_variants, output_csv)
# Load necessary library for reading VCF files
library(VariantAnnotation)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- readVcf(vcf_file, "hg19")
# Extract INFO field
info_field <- info(vcf)[[key]]
# Find indices of variants with the specified value in the INFO field
variant_indices <- which(info_field == value)
# Extract variants with the specified indices
filtered_variants <- vcf[variant_indices]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_csv <- function(filtered_variants, output_file) {
write.csv(as.data.frame(filtered_variants), file = output_file, row.names = FALSE)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Load necessary library for reading VCF files
library(VariantAnnotation)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- readVcf(vcf_file, "hg19")
# Initialize an empty vector to store indices of filtered variants
variant_indices <- c()
# Iterate through each variant
for (i in 1:length(vcf)) {
# Get the INFO field value for the current variant
info_value <- unlist(info(vcf[i])[[key]])
# Check if the specified value is present in the INFO field
if (value %in% info_value) {
variant_indices <- c(variant_indices, i)
}
}
# Extract variants with the specified indices
filtered_variants <- vcf[variant_indices]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_csv <- function(filtered_variants, output_file) {
write.csv(as.data.frame(filtered_variants), file = output_file, row.names = FALSE)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Specify output CSV file path
output_csv <- "C:/Users/apera/OneDrive/Escritorio/testingTFM.csv"
# Write filtered variants to CSV file
write_to_csv(filtered_variants, output_csv)
View(filtered_variants)
nrow(filtered_variants)
runApp()
# Load necessary library for reading VCF files
library(VariantAnnotation)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- readVcf(vcf_file, "hg19")
# Initialize an empty vector to store indices of filtered variants
variant_indices <- c()
# Iterate through each variant
for (i in 1:length(vcf)) {
# Get the INFO field value for the current variant
info_value <- unlist(info(vcf[i])[[key]])
# Check if the specified value is present in the INFO field
if (value %in% info_value) {
variant_indices <- c(variant_indices, i)
}
}
# Extract variants with the specified indices
filtered_variants <- vcf[variant_indices]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_csv <- function(filtered_variants, output_file) {
# Extract relevant information from the CollapsedVCF object
variants_info <- info(filtered_variants)
chrom <- seqnames(filtered_variants)
pos <- start(filtered_variants)
ref <- REF(filtered_variants)
alt <- ALT(filtered_variants)
# Combine all information into a data frame
variants_df <- data.frame(Chrom = chrom, Position = pos, REF = ref, ALT = alt, Info = variants_info)
# Write data frame to CSV file
write.csv(variants_df, file = output_file, row.names = FALSE)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Specify output CSV file path
output_csv <- "C:/Users/apera/OneDrive/Escritorio/testingTFM.csv"
# Write filtered variants to CSV file
write_to_csv(filtered_variants, output_csv)
# Load necessary library for reading VCF files
library(VariantAnnotation)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- readVcf(vcf_file, "hg19")
# Initialize an empty vector to store indices of filtered variants
variant_indices <- c()
# Iterate through each variant
for (i in 1:length(vcf)) {
# Get the INFO field value for the current variant
info_value <- unlist(info(vcf[i])[[key]])
# Check if the specified value is present in the INFO field
if (value %in% info_value) {
variant_indices <- c(variant_indices, i)
}
}
# Extract variants with the specified indices
filtered_variants <- vcf[variant_indices]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_vcf <- function(filtered_variants, output_file) {
# Write filtered variants to VCF file
writeVcf(filtered_variants, output_file)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Specify output CSV file path
output_vcf <- "C:/Users/apera/OneDrive/Escritorio/testingTFM.vcf"
# Write filtered variants to CSV file
write_to_vcf(filtered_variants, output_vcf)
# Load necessary library for reading VCF files
library(VariantAnnotation)
library(vcfR)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- readVcf(vcf_file, "hg19")
# Initialize an empty vector to store indices of filtered variants
variant_indices <- c()
# Iterate through each variant
for (i in 1:length(vcf)) {
# Get the INFO field value for the current variant
info_value <- unlist(info(vcf[i])[[key]])
# Check if the specified value is present in the INFO field
if (value %in% info_value) {
variant_indices <- c(variant_indices, i)
}
}
# Extract variants with the specified indices
filtered_variants <- vcf[variant_indices]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_vcf <- function(new_vcf, output_file) {
# Write filtered variants to VCF file
write.vcf(new_vcf, output_file)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Specify output CSV file path
output_vcf <- "C:/Users/apera/OneDrive/Escritorio/testingTFM.vcf.gz"
# Write filtered variants to CSV file
write_to_vcf(filtered_variants, output_vcf)
# Load necessary library for reading VCF files
library(VariantAnnotation)
library(vcfR)
# Function to filter variants based on INFO field
filter_variants <- function(vcf_file, key, value) {
# Read VCF file
vcf <- readVcf(vcf_file, "hg19")
# Initialize an empty vector to store indices of filtered variants
variant_indices <- c()
# Iterate through each variant
for (i in 1:length(vcf)) {
# Get the INFO field value for the current variant
info_value <- unlist(info(vcf[i])[[key]])
# Check if the specified value is present in the INFO field
if (value %in% info_value) {
variant_indices <- c(variant_indices, i)
}
}
# Extract variants with the specified indices
filtered_variants <- vcf[variant_indices]
return(filtered_variants)
}
# Function to write filtered variants to CSV file
write_to_vcf <- function(new_vcf, output_file) {
# Write filtered variants to VCF file
new_vcfR <- read.vcfR(new_vcf)
write.vcf(new_vcfR, output_file)
}
# Example usage:
# Specify input VCF file path
input_vcf <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Specify key and value for filtering
info_key <- "CLNSIG"
info_value <- "Pathogenic"
# Filter variants based on INFO field
filtered_variants <- filter_variants(input_vcf, info_key, info_value)
# Specify output CSV file path
output_vcf <- "C:/Users/apera/OneDrive/Escritorio/testingTFM.vcf.gz"
# Write filtered variants to CSV file
write_to_vcf(filtered_variants, output_vcf)
header(filtered_variants)
head(rowRanges(filtered_variants), 3)
seqnames(filtered_variants[1:5])
ID(filtered_variants[1:5])
ref(filtered_variants[1:5])
alt(filtered_variants[1:5])
info(filtered_variants[1:5])
id(filtered_variants[1:5])
ranges(filtered_variants[1:5])
pos(filtered_variants[1:5])
colData(filtered_variants)
vcfFields(filtered_variants)
vcfFields(info(filtered_variants))
geno(filtered_variants)
fixed(filtered_variants)
filtered_variants
View(filtered_variants)
filtered_variants[1]
vcf_df <- as.data.frame(filtered_variants)
rowRanges(filtered_variants[1:5])
seqnames(rowRanges(filtered_variants[1:5]))
as.data.frame(seqnames(rowRanges(filtered_variants[1:5])))
chrom <- seqnames(rowRanges(filtered_variants))
chrom <- as.data.frame(seqnames(rowRanges(filtered_variants)))
View(chrom)
rowRanges(filtered_variants[1:5]))
rowRanges(filtered_variants[1:5])
chrom <- as.data.frame(seqnames(rowRanges(filtered_variants)))
ranges <- as.data.frame(ranges(rowRanges(filtered_variants)))
View(ranges)
chrom <- as.data.frame(seqnames(rowRanges(filtered_variants)))
ranges <- as.data.frame(paramRangeID(rowRanges(filtered_variants)))
chrom <- as.data.frame(seqnames(rowRanges(filtered_variants)))
ranges <- as.data.frame(strand(rowRanges(filtered_variants)))
View(ranges)
chrom <- as.data.frame(seqnames(rowRanges(filtered_variants)))
ranges <- as.data.frame(ranges(rowRanges(filtered_variants)))
View(ranges)
View(vcf)
custom_annotation <- runif(nrow(rowData(vcf)))
rowData(vcf)$custom_annotation <- custom_annotation
View(vcf)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RTCGA")
shiny::runApp()
