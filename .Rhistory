shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(VariantAnnotation)
# Set the path to your VCF file
vcf_file <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Read VCF file
vcf <- readVcf(vcf_file)
# Get the number of variants
num_variants <- nrow(vcf)
# Print the number of variants
cat("Number of variants:", num_variants, "\n")
pathogenic_variants <- tryCatch({
subset(vcf, INFO(vcf)$CLNSIG %in% c("Pathogenic", "Likely_pathogenic"))
}, error = function(e) {
return(data.frame())
})
num_pathogenic_variants <- nrow(pathogenic_variants)
pathogenic_variants <- tryCatch({
subset(vcf, INFO(vcf)$CLNSIG %in% c("Pathogenic", "Likely_pathogenic"))
})
pathogenic_variants <- subset(vcf, INFO(vcf)$CLNSIG %in% c("Pathogenic", "Likely_pathogenic"))
pathogenic_variants <- subset(vcf, info(vcf)$CLNSIG %in% c("Pathogenic", "Likely_pathogenic"))
View(pathogenic_variants)
pathogenic_variants <- tryCatch({
subset(vcf, info(vcf)$CLNSIG %in% c("Pathogenic", "Likely_pathogenic"))
}, error = function(e) {
return(data.frame())
})
pathos <- as.data.frame(table(info(vcf)$CLNSIG))
pathos
library(VariantAnnotation)
# Set the path to your VCF file
vcf_file <- "C:/Users/apera/OneDrive/Escritorio/clinvar_papu.vcf"
# Read VCF file
vcf <- readVcf(vcf_file)
# Get the number of variants
num_variants <- nrow(vcf)
# Print the number of variants
cat("Number of variants:", num_variants, "\n")
pathos <- as.data.frame(table(info(vcf)$CLNSIG))
pathos
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pathogenic_variants <- tryCatch({
clnsig_values <- info(vcf)$CLNSIG
subset(vcf, clnsig_values %in% c("Pathogenic", "Likely_pathogenic"))
}, error = function(e) {
return(data.frame())
})
num_pathogenic_variants <- nrow(pathogenic_variants)
num_pathogenic_variants <- nrow(pathogenic_variants)
pathogenic_variants <- tryCatch({
clnsig_values <- info(vcf)$CLNSIG
subset(vcf, clnsig_values %in% c("Pathogenic", "Likely_pathogenic"))
}, error = function(e) {
return(data.frame())
})
num_pathogenic_variants <- nrow(pathogenic_variants)
View(pathogenic_variants)
pathogenic_variants <- tryCatch({
clnsig_values <- info(vcf)$CLNSIG
subset(vcf, clnsig_values %in% c("Pathogenic", "Likely_pathogenic"))
}, error = function(e) {
return(data.frame())
})
num_pathogenic_variants <- nrow(pathogenic_variants)
num_pathogenic_variants
pathogenic_variants <- tryCatch({
clnsig_values <- info(vcf)$CLNSIG
subset(vcf, clnsig_values %in% c("Pathogenic", "Likely_pathogenic"))
}, error = function(e) {
return(data.frame())
})
num_pathogenic_variants <- nrow(pathogenic_variants)
num_pathogenic_variants
class(clnsig_values)
pathogenic_variants <- tryCatch({
clnsig_values <- info(vcf)$CLNSIG
subset(vcf, clnsig_values %in% c("Pathogenic", "Likely_pathogenic"))
}, error = function(e) {
return(data.frame())
})
num_pathogenic_variants <- nrow(pathogenic_variants)
num_pathogenic_variants
x <- subset(vcf, clnsig_values %in% c("Pathogenic", "Likely_pathogenic"))
class(x)
View(x)
x
clnsig_values
runApp()
runApp()
runApp()
runApp()
x <- as.data.frame(table(info(vcf)[[CLNSIG]]))
x <- as.data.frame(table(info(vcf)[[CLNSIG]]))
x <- as.data.frame(table(info(vcf)$CLNSIG))
x
x <- as.data.frame(info(vcf)$CLNSIG)
x
runApp()
runApp()
x2 <- subset(x$value == 'Benign')
x2 <- subset(x, x$value == 'Benign')
length(x2)
nrow(x2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("tcgabiolinks")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
if (!require("BiocManager", quietly = TRUE, force = TRUE))
install.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("TCGAbiolinks")
BiocManager::install("TCGAbiolinks", force = TRUE)
shiny::runApp()
runApp()
install.packages("htmltools")
install.packages("htmltools")
shiny::runApp()
